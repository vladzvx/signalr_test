using IASK.Cases.JsonStorage.Utils;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace IASK.Tests.Cases.JsonStorage
{

    [TestClass]
    public class JsonProcessorTests
    {

        [TestMethod]
        public void Test1()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "\"r7Vo9y6XDRtPbX9eoymCFLfo\"], \"Permit\":{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"}}";
            string temp = processor.GetDataJson(testData1);
            Assert.IsTrue(temp == "{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"}");
        }

        [TestMethod]
        public void Test2()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "\"Data\":{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"}";
            Assert.IsTrue( processor.GetDataJson(testData1)== "{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"}");
        }

        [TestMethod]
        public void Test3()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"}";
            Assert.IsTrue(processor.GetDataJson(testData1) == "{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"}");
        }

        [TestMethod]
        public void Test4()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "[\"r7Vo9y6XDRtPbX9eoymCFLfo\"], \"Permit\":{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"}}";
            Assert.IsTrue(processor.GetDataJson(testData1) == "[\"r7Vo9y6XDRtPbX9eoymCFLfo\"]");
        }

        [TestMethod]
        public void Test5()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "{\"Permit\":{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"},\"Data\":{}}";
            Assert.IsTrue(processor.GetDataJson(testData1) == "{\"Permit\":{\"authKey\":\"r7Vo9y6XDRtPbX9eoymCFLfo\",\"service\":\"139\"},\"Data\":{}}");
        }

        [TestMethod]
        public void Test6()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "{}";
            Assert.IsTrue(processor.GetDataJson(testData1) == "{}");
        }

        [TestMethod]
        public void Test7()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "[]";
            Assert.IsTrue(processor.GetDataJson(testData1) == "[]");
        }

        [TestMethod]
        public void Test8()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "\"authKey\":[]";
            Assert.IsTrue(processor.GetDataJson(testData1) == "[]");
        }

        [TestMethod]
        public void Test9()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "\"authKey\":{}";
            Assert.IsTrue(processor.GetDataJson(testData1) == "{}");
        }

        [TestMethod]
        public void Test10()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "{\"Data\":[{\"Id\":173,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"живот\",\"Value\":\"M416 507L441 495L460 483L485 462.5L489 477L500.5 483L511.5 475.5L517.5 463.5L536 481L564 497L590 507L617 514L608 573L604 621L611 644L631 695L618 716L592 747L568 771L538 787L501 799L485 795L463 787L423 762L394 729L370 700L377 678L395 635L398 616L386 515L416 507Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":630,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"левая рука\",\"Value\":\"M628 341L619 387L621 397L633 440V460L665 536L679 581L691 620L715 671L742 716L767 762L774 793L782 824L793 853L800 865L807 876L813 872L821 890L824 895H827L829 882L821 833L842 896L845 898L851 899L855 891L838 826L857 877L865 880L868 874L867 858L856 819L854 806L845 786V780L854 779L868 788L882 793L890 792L892 786L880 775L870 769L853 759L823 748L807 741L796 724L781 685L765 619L748 580L728 541L703 464L690 421L687 398L674 332L663 312L649 296L633 292L627 296L605 302L628 341Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":632,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"левая нога\",\"Value\":\"M656 806L661 858L658 899L638 1124L633 1147L631 1170L632 1186L637 1212L639 1284L635 1376L623 1470V1490L624 1500L625 1512L623 1533L668 1627L655 1639L652 1643L646 1647L642 1646V1649L641 1652L634 1656L628 1655L625 1649L622 1658L613 1659L605 1658L599 1648L595 1635L590 1623L587 1601L581 1571L576 1559L577 1533L573 1521L571 1511L575 1486L574 1449L564 1383L548 1290V1271L551 1247L554 1212L551 1185L545 1169L538 1098L534 996L529 958L518 905L515 875L516 860L508 851L526 835L539 809L553 779L564 773L604 735L631 700L656 806Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":631,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"правая нога\",\"Value\":\"M395 730L427 764L445 784L464 812L480 837L488 847L493 849L487 859V872L480 923L468 984L467 1013L459 1152L447 1201L448 1229L454 1292L441 1362L426 1462L430 1495L432 1517L427 1526L426 1537V1557L420 1565L417 1584L414 1614L408 1630L405 1640L401 1653L395 1660L380 1658L375 1654L366 1656L361 1648H355L345 1640L341 1634L336 1633L335 1626L339 1616L378 1526L376 1510L378 1492L377 1462L368 1402L360 1315L361 1244L363 1218L370 1184L369 1159L361 1112L340 881L341 843L348 795L361 747L372 700L395 730Z\",\"Type\":\"GROUP_BODY\"}]}";
            Assert.IsTrue(processor.GetDataJson(testData1) == testData1);
        }

        [TestMethod]
        public void Test11()
        {
            JsonProcessor processor = new JsonProcessor();
            string testData1 = "\"Data\":[{\"Id\":173,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"живот\",\"Value\":\"M416 507L441 495L460 483L485 462.5L489 477L500.5 483L511.5 475.5L517.5 463.5L536 481L564 497L590 507L617 514L608 573L604 621L611 644L631 695L618 716L592 747L568 771L538 787L501 799L485 795L463 787L423 762L394 729L370 700L377 678L395 635L398 616L386 515L416 507Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":630,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"левая рука\",\"Value\":\"M628 341L619 387L621 397L633 440V460L665 536L679 581L691 620L715 671L742 716L767 762L774 793L782 824L793 853L800 865L807 876L813 872L821 890L824 895H827L829 882L821 833L842 896L845 898L851 899L855 891L838 826L857 877L865 880L868 874L867 858L856 819L854 806L845 786V780L854 779L868 788L882 793L890 792L892 786L880 775L870 769L853 759L823 748L807 741L796 724L781 685L765 619L748 580L728 541L703 464L690 421L687 398L674 332L663 312L649 296L633 292L627 296L605 302L628 341Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":632,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"левая нога\",\"Value\":\"M656 806L661 858L658 899L638 1124L633 1147L631 1170L632 1186L637 1212L639 1284L635 1376L623 1470V1490L624 1500L625 1512L623 1533L668 1627L655 1639L652 1643L646 1647L642 1646V1649L641 1652L634 1656L628 1655L625 1649L622 1658L613 1659L605 1658L599 1648L595 1635L590 1623L587 1601L581 1571L576 1559L577 1533L573 1521L571 1511L575 1486L574 1449L564 1383L548 1290V1271L551 1247L554 1212L551 1185L545 1169L538 1098L534 996L529 958L518 905L515 875L516 860L508 851L526 835L539 809L553 779L564 773L604 735L631 700L656 806Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":631,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"правая нога\",\"Value\":\"M395 730L427 764L445 784L464 812L480 837L488 847L493 849L487 859V872L480 923L468 984L467 1013L459 1152L447 1201L448 1229L454 1292L441 1362L426 1462L430 1495L432 1517L427 1526L426 1537V1557L420 1565L417 1584L414 1614L408 1630L405 1640L401 1653L395 1660L380 1658L375 1654L366 1656L361 1648H355L345 1640L341 1634L336 1633L335 1626L339 1616L378 1526L376 1510L378 1492L377 1462L368 1402L360 1315L361 1244L363 1218L370 1184L369 1159L361 1112L340 881L341 843L348 795L361 747L372 700L395 730Z\",\"Type\":\"GROUP_BODY\"}]}";
            Assert.IsTrue(processor.GetDataJson(testData1) == "[{\"Id\":173,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"живот\",\"Value\":\"M416 507L441 495L460 483L485 462.5L489 477L500.5 483L511.5 475.5L517.5 463.5L536 481L564 497L590 507L617 514L608 573L604 621L611 644L631 695L618 716L592 747L568 771L538 787L501 799L485 795L463 787L423 762L394 729L370 700L377 678L395 635L398 616L386 515L416 507Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":630,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"левая рука\",\"Value\":\"M628 341L619 387L621 397L633 440V460L665 536L679 581L691 620L715 671L742 716L767 762L774 793L782 824L793 853L800 865L807 876L813 872L821 890L824 895H827L829 882L821 833L842 896L845 898L851 899L855 891L838 826L857 877L865 880L868 874L867 858L856 819L854 806L845 786V780L854 779L868 788L882 793L890 792L892 786L880 775L870 769L853 759L823 748L807 741L796 724L781 685L765 619L748 580L728 541L703 464L690 421L687 398L674 332L663 312L649 296L633 292L627 296L605 302L628 341Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":632,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"левая нога\",\"Value\":\"M656 806L661 858L658 899L638 1124L633 1147L631 1170L632 1186L637 1212L639 1284L635 1376L623 1470V1490L624 1500L625 1512L623 1533L668 1627L655 1639L652 1643L646 1647L642 1646V1649L641 1652L634 1656L628 1655L625 1649L622 1658L613 1659L605 1658L599 1648L595 1635L590 1623L587 1601L581 1571L576 1559L577 1533L573 1521L571 1511L575 1486L574 1449L564 1383L548 1290V1271L551 1247L554 1212L551 1185L545 1169L538 1098L534 996L529 958L518 905L515 875L516 860L508 851L526 835L539 809L553 779L564 773L604 735L631 700L656 806Z\",\"Type\":\"GROUP_BODY\"},{\"Id\":631,\"Lib\":1,\"Idb\":\"FRONT\",\"Condition\":null,\"Label\":\"правая нога\",\"Value\":\"M395 730L427 764L445 784L464 812L480 837L488 847L493 849L487 859V872L480 923L468 984L467 1013L459 1152L447 1201L448 1229L454 1292L441 1362L426 1462L430 1495L432 1517L427 1526L426 1537V1557L420 1565L417 1584L414 1614L408 1630L405 1640L401 1653L395 1660L380 1658L375 1654L366 1656L361 1648H355L345 1640L341 1634L336 1633L335 1626L339 1616L378 1526L376 1510L378 1492L377 1462L368 1402L360 1315L361 1244L363 1218L370 1184L369 1159L361 1112L340 881L341 843L348 795L361 747L372 700L395 730Z\",\"Type\":\"GROUP_BODY\"}]");
        }
    }
}
